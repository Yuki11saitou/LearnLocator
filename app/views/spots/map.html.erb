<% content_for(:title, t('.title')) %>

<%# 検索窓表示 %>
<div class="mt-3">
    <div class="w-5/6 mx-auto max-w-screen-xl">
        <div class="w-full"><input id="pac-input" class="controls input input-bordered input-sm w-full text-sm" type="text" placeholder="<%= t('.placeholder.search') %>"></div>
    </div>
</div>
<%# Map表示・マーカー説明エリア %>
<div class="mt-3 mx-3">
    <div class="mx-auto max-w-screen-xl">
        <%# Map表示 %>
        <%# 100vhと100dvhの両方を使って、アドレスバーやブラウザの仕様に依存しない形で地図の高さを調整 %>
        <div id="map" class="relative rounded-xl" style="height: calc(min(100vh, 100dvh) - 220px);">
            <%# マップ読み込み中のローディングリング %>
            <div class="absolute inset-0 flex items-center justify-center">
                <span class="loading loading-ring loading-lg"></span>
            </div>
        </div>
        <%# マーカー説明 %>
        <div class="mt-1">
            <div class="flex justify-end items-center">
                <img src="https://maps.google.com/mapfiles/ms/micons/yellow-dot.png" class="h-4 ml-4 skeleton">
                <div class="text-xs"><%= t('.marker.current_location') %></div>
                <div class="mx-2"></div>
                <img src="https://maps.google.com/mapfiles/ms/micons/red-dot.png" class="h-4 skeleton">
                <div class="text-xs"><%= t('.marker.study_room') %></div>
                <div class="mx-2"></div>
                <img src="https://maps.google.com/mapfiles/ms/micons/blue-dot.png" class="h-4 skeleton">
                <div class="text-xs"><%= t('.marker.co_working_space') %></div>
            </div>
        </div>
    </div>
</div>

<!-- モーダルを表示する要素 -->
<dialog id="spot_modal" class="modal">
    <div class="modal-box">
        <div class="spot_show"></div>
    </div>
</dialog>

<script>
    let map;  // グローバルに map 変数を宣言

    // ⭐️地図を初期化
    function initMap() {
        // 地図要素：HTMLの要素 id="map" を持つ div 要素を取得し、その中に地図を表示
        const mapElement = document.getElementById('map');
        // mapElementが正常に取得できない場合はエラー
        if (!mapElement) {
            console.error('Map element not found');
            return;
        }

        // 地図のオプション（デフォルト位置：東京）
        const defaultMapOptions = {
            center: { lat: 35.6803997, lng: 139.7690174 },
            zoom: 12
        };

        // ⭐️⭐️指定した要素・オプションで地図を表示（const displayMap は mapOptions のみを引数として持つ）
        const displayMap = (mapOptions) => {
            // Mapインスタンスを作成（地図要素：mapElement, 地図のオプション：mapOptions）
            map = new google.maps.Map(mapElement, mapOptions);

            // 検索ボックスに入力された値を取得
            const input = document.getElementById('pac-input');
            const searchBox = new google.maps.places.SearchBox(input);

            // ⭐️⭐️⭐️ユーザーが SearchBox にテキスト入力し検索した際に発生
            searchBox.addListener('places_changed', function() {
                // SearchBox に入力したテキストに基づき、選択された場所の詳細情報を取得（返されるのは、PlaceResult オブジェクトの配列）
                const places = searchBox.getPlaces();

                // スポットの境界（緯度経度ではなくスポットの範囲）
                const bounds = new google.maps.LatLngBounds();

                // 検索結果がない場合は何もしない
                if (places.length === 0) {
                return;
                }

                // 検索結果がある場合
                places.forEach(function(place) {
                // 検索結果の中にジオメトリ情報（ビューポート(範囲)・緯度経度(点)）or （緯度経度）がない場合は何もしない
                if (!place.geometry || !place.geometry.location) {
                    console.log("Returned place contains no geometry");
                    return;
                }

                // ジオメトリ情報があれば、マップをその地点に移動
                if (place.geometry.viewport) {
                    // viewport がある場合は bounds.union を使い、その場所全体が含まれるように境界を調整
                    bounds.union(place.geometry.viewport);
                } else {
                    // viewport がない場合は bounds.extend を使い、場所の中心点を表示範囲に含めるように境界を調整
                    bounds.extend(place.geometry.location);
                }
                });

                // bounds 内のすべての場所が地図上に収まるように一度自動調整（各場所の bounds を範囲に追加し、すべての場所が一度に地図に表示されるよう調整）
                map.fitBounds(bounds);
                // 特定の拡大率で地図が表示されるようにする
                map.setZoom(16);
            });

            // ⭐️⭐️⭐️マーカーを追加（spotの情報からマーカーを追加する）
            <% @spots.each do |spot| %>
                (() => {
                    // アイコンURLを格納する変数を定義
                    let iconUrl;

                    // spot.category.id に応じてアイコンのURLを切り替える
                    switch (<%= spot.category.id %>) {
                        case 1:
                            iconUrl = "https://maps.google.com/mapfiles/ms/micons/red-dot.png";
                            break;
                        case 2:
                            iconUrl = "https://maps.google.com/mapfiles/ms/micons/blue-dot.png";
                            break;
                        default:
                            iconUrl = "https://maps.google.com/mapfiles/ms/micons/green-dot.png"; // デフォルトのマーカー
                    }

                    // Markerインスタンスを作成（繰り返しの時はconstではなく、ループ外の変数と衝突しないletで定義）
                    let marker = new google.maps.Marker({
                        position: {lat: <%= spot.latitude %>, lng: <%= spot.longitude %>},
                        map: map,
                        title: '<%= j spot.name %>',
                        icon: iconUrl // 切り替えたアイコンを使用
                    });

                    // マーカーをクリックするとSpot詳細に遷移 → spot_path(spot)
                    marker.addListener('click', function() {
                        // モーダルの内容
                        const modalContent = `
                        <div class="mx-auto flex justify-start">
                            <div class="mr-4">
                                <%= image_tag 'LearnLocator_logo.png', width: 160 %>
                            </div>
                            <div class="m-auto w-full text-center">
                                <p class="text-lg font-bold"><%= j spot.name %></p>
                            </div>
                        </div>
                        <div class="mt-4">
                            <div class="mx-auto flex justify-start items-center">
                                <div class="text-xs text-white font-bold badge badge-primary"><%= j spot.category.name %></div>
                                <div class="mr-2"></div>
                                <% if spot.rating.present? %>
                                    <div class="text-xs text-white font-bold badge badge-primary"><%= image_tag 'rating_mark.svg', class: "h-3 w-3 mr-1" %><%= j spot.rating %></div>
                                <% end %>
                                <div class="mr-2"></div>
                                <div id="review_count" class="text-white font-bold badge badge-primary">
                                    <%= image_tag 'review_mark.svg', class: "h-3 w-3 mr-1" %>
                                    <%= spot.reviews.count %>
                                </div>
                            </div>
                        </div>
                        <div class="mt-4 text-right">
                            <%= link_to t('.to_spot_show'), spot_path(spot), data: { turbo: false }, class: "btn btn-outline btn-primary" %>
                        </div>
                        `;

                        // モーダル内容をclass="spot_show"の要素に追加
                        document.querySelector('.spot_show').innerHTML = modalContent;

                        // モーダルを表示
                        const modal= document.getElementById('spot_modal');
                        modal.showModal();
                    });
                })();
            <% end %>
        };


        // ⭐️⭐️現在地が取得できる場合はそこを中心に地図を表示
        // ブラウザがWeb API(であるところのGeolocation API)をサポートしているかどうかをチェック
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function(position) {
                // 現在の緯度経度を取得
                const currentLocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                // 地図のオプションを現在地に設定して地図を表示
                displayMap({ ...defaultMapOptions, center: currentLocation });
                // 現在地にマーカーを追加
                const marker = new google.maps.Marker({
                    position: currentLocation,
                    map: map,
                    title: '現在地',
                    icon: "https://maps.google.com/mapfiles/ms/micons/yellow-dot.png" // 現在地のマーカー
                });
            }, function() {
                // 現在地が取得できない場合もデフォルトの地図を表示
                displayMap(defaultMapOptions);
            });
        } else {
            // Geolocation APIが利用不可能な場合もデフォルトの地図を表示
            displayMap(defaultMapOptions);
        }
    }

    // ⭐️画面のどこを押してもモーダルを閉じる
    document.addEventListener('click', function(event) {
        // モーダル内容をclass="spot_show"の要素に追加
        const modal = document.getElementById('spot_modal');
        if (event.target === modal) {
        modal.close();
        }
    });

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV["GOOGLE_MAPS_API_KEY"] %>&libraries=places&callback=initMap"></script>